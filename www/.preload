
--mako.tldir:configure{priority=9} -- PATCH for test

local log -- function: see below
local hio=ba.openio"home"
local rw=require"rwfile"
local fmt=string.format
local sbyte=string.byte
local supper=string.upper 
local baexec=ba.exec

-- For test purposes only
local iswin=(function()
   local _,type=hio:resourcetype()
   if type == "windows" then
      baexec=function(ex) trace("Dummy exec:",ex) return 0 end
      return true
   end
end)()


mako.createloader(io)

if (not hio:stat"cert" and not hio:mkdir"cert") then
   error("Cannot create "..hio:realpath"cert/")
end

if mako.daemon then -- If deployed
   require"seed" -- seed sharkssl and rnd generators.
end

-- Manually load and insert ZoneDB (used by other modules).
local db=io:dofile(".lua/ZoneDB.lua",_ENV) -- Requires env:io
package.loaded.ZoneDB=db -- insert as module

local certUpdater=require"CertUpdater"
local conf=require"loadconf"
local settingsT=conf.settings
local ok,err=pcall(function()
  assert(type(settingsT.ns1) == 'string' and
         type(settingsT.ns2) == 'string' and
         type(settingsT.dn) == 'string')
end) 
if not ok then
   error"Invalid 'settings' table in mako.conf"
end

local admEmail=conf.log.smtp.to
assert(type(admEmail=="string", "mako.conf missing log.smpt.to"))

settingsT.ipns1,settingsT.ipns2=
   ba.socket.toip(settingsT.ns1),ba.socket.toip(settingsT.ns2)

-- Fetch our own IP address and resolve domain name 'ns1' or 'ns2'
-- (future proof)
local serverIP,hostname = (function()
   local ip,s
   while not s do
      s=ba.socket.connect("google.com",80)
   end
   local ip,port,is6=s:sockname()
   if is6 and ip:find("::ffff:",1,true) == 1 then
      ip=ip:sub(8,-1)
   end
   s:close()
   return ip, ip == settingsT.ipns1 and settingsT.ns1 or settingsT.ns2
end)()


local function log(iserr,fmts,...)
   local msg=fmt("SharkTrustX: "..fmts,...)
   tracep(false,iserr and 0 or 2,msg)
   if mako.daemon then
      local op = iserr and {flush=true,subject="SharkTrustX Error"} or {ts=true}
      mako.log(msg,op)
   end
   return nil, msg
end
_G.log = log -- Make global. Used by other modules and LSP pages.

local rtm = require"RefreshTokenManager"
local PBKDF2Cache = require"PBKDF2Cache".getDK


do -- xssfilter
   local escSyms= {
      ['&']="&amp;",
      ['<']="&lt;",
      ['>']="&gt;",
      ['"']="&quot;",
      ["'"]="&#x27;"
   }
   local function escape(c) return escSyms[c] end
   function app.xssfilter(x)
      if type(x) == "string" then
         return string.gsub(x,"[&<>\"'/]", escape)
      end
      local t={}
      for k,v in pairs(x) do
         t[k] = string.gsub(v,"[&<>\"'/]", escape)
      end
      return t
   end
end
local function trimS(s) return s and s:gsub("^%s*(.-)%s*$", "%1") end
function app.trim(x)
   if x then
      if type(x) == "string" then return trimS(x) end
      local t={}
      for k,v in pairs(x) do t[k]=trimS(v) end
      return t
   end
end
local xssfilter,trim=xssfilter,trim

local realm=conf.realm -- for HA1 and auth management
assert(type(realm) == "string", "Missing 'realm' in mako.conf")
-- https://realtimelogic.com/ba/doc/en/lua/auth.html
local function ha1(username,password)
   return ba.crypto.hash"md5"(username)":"(realm)":"(password)(true,"hex")
end


local function peername(cmd)
   local ip,port,is6=cmd:peername()
   if not ip then return "?" end
   if is6 and ip:find("::ffff:",1,true) == 1 then
      ip=ip:sub(8,-1)
   end
   return ip
end


-- Execute command 'cmd' in /usr/sbin/ with 'args'
local function execsbin(cmd,args)
   cmd=fmt("/usr/sbin/%s %s",cmd,args)
   local resp,ecode=baexec(cmd)
   if ecode ~= 0 then
      log(true, "Command %s failed: %s %s", cmd, tostring(ecode), resp)
   end
   return {cmd=cmd,resp=resp,ecode=ecode}
end


-- Returns /etc/bind/zones/[zname].db
local function mkFullZname(zname)
   return fmt("/etc/bind/zones/%s.db",zname)
end


-- /etc/bind/named.conf.local
local namedConfFmt=[[
zone "%s" {
type master;
allow-transfer {"none";};
file "/etc/bind/zones/%s.db";
};

]]
local function updateNamedConf()
   local fp=_G.io.open("/etc/bind/named.conf.local","w")
   assert(fp, "'bind9' must be installed")
   for zid,zname in db.getZonesT() do
      fp:write(fmt(namedConfFmt,zname,zname))
   end
   fp:close()
end

--  /etc/bind/zones/<name>.db
local zonefmt=[[
$TTL 900
@ IN SOA ns1.%s. admin.%s. (
%d ; Serial
3h ; Refresh
1h ; Retry
1w ; Expire
900 ) ; Negative TTL cache
; name servers - NS records
     IN      NS      ns1.%s.
     IN      NS      ns2.%s.
; name servers - A records
ns1.%s.   86400 IN      A       %s
ns2.%s.   86400 IN      A       %s
; DNS root domain
%s. 86400 IN A %s
%s. 86400 IN A %s
]]

local RevConRecsT={} -- key=record-name,val=true

-- Creates/overwrites /etc/bind/zones/[zname].db
local function bindzonedb(zoneT, txtRecsT)
   local resp={}
   local zname=zoneT.zname
   local fp=_G.io.open(mkFullZname(zname),"w")
   fp:write(fmt(zonefmt,
                zname,zname, -- SOA
                os.time(), -- Serial
                zname, -- NS record 1
                zname, -- NS record 2
                zname, settingsT.ipns1, -- NS A record one
                zname, settingsT.ipns2, -- NS A record two
                zname, settingsT.ipns1,
                zname, settingsT.ipns2))
   local function emitRec(name,class,type,data)
      fp:write(fmt("%s %s %s %s\n",name,class,type,data))
   end
   local function laddr(devT) emitRec(devT.name,"IN","A",devT.localAddr) end
   local function waddr(devT) emitRec(devT.name,"IN","A",devT.wanAddr) end
   -- Ref-RR: Set device A record to local IP, WAN IP, or both (Round Robin)
   local actionT={
      ["local"]=laddr,
      wan=waddr,
      both=function(devT) laddr(devT) waddr(devT) end
   }
   for devT in db.getDevices4ZoneT(zoneT.zid) do
      actionT[devT.dns](devT)
   end

   -- All Reverse Connection DNS names point to online server's IP.
   local t = RevConRecsT[zname]
   if t then
      local ip=settingsT.ipns1
      for rec in pairs(t) do emitRec(rec,"IN","A",ip) end
   end

   -- Temporary TXT records used with LET's Encrypt
   if txtRecsT then
      for k,v in pairs(txtRecsT) do
         emitRec(k..".", "IN", "TXT", v) -- Should be absolute: Add a .
      end
   end
   fp:close()
end

-- Manage temporary Let's Encrypt TXT records.
-- Returns (and creates) the recsT, which may initially be nil.
-- RecsT[zid] is: { key:anyUniqueVal and val: {recname=recval } }
local zonesTxtRecsT={}
local function getRecsTfromZoneT(zoneT, key)
   local recsT = zonesTxtRecsT[zoneT.zid]
   if not recsT then
      recsT={}
      zonesTxtRecsT[zoneT.zid]=recsT
   end
   if key then
      local t = recsT[key]
      if not t then t={}  recsT[key]=t end
      return recsT, t
   end
   return recsT
end

-- Update the 'bind' database file for zone
-- 'bind' to reload DB.
local function bindUpdateZone(zoneT)
   local recsT=getRecsTfromZoneT(zoneT)
   local extraRecsT={}
   for _,recT in pairs(recsT) do
      for k, v in pairs(recT) do
         extraRecsT[k]=v
      end
   end
   bindzonedb(zoneT, extraRecsT)
   execsbin("rndc","reload "..zoneT.zname)
end

local rcBridge=require"RevConnBridge"
rcBridge.init{
   setRec=function(zname,recname, noUpdate)
      local zoneT = db.znameGetZoneT(zname)
      if zoneT then
         local t = RevConRecsT[zname]
         if not t then t={} RevConRecsT[zname]=t end
         t[recname]=true 
      end
      if not noUpdate then bindUpdateZone(zoneT) end
   end,
   removeRec=function(zname,recname)
      local t = RevConRecsT[zname]
      if t then t[recname] = nil end
   end
}


-- Called from CertUpdater.lua when performing DNS challenge and a DNS
-- record  ACME challenge must be set
local function setDnsRec(domain, dnsRecord, dnsAuth)
   local zoneT = db.znameGetZoneT(domain)
   if zoneT then
      -- We use dnsRecord as key, which is OK since it is unique -- a fully qulified name
      local recsT,recT = getRecsTfromZoneT(zoneT, dnsRecord)
      recT[dnsRecord]=dnsAuth
      bindUpdateZone(zoneT)
   else
      log(true,"No ZoneT for %s",domain)
   end
end


-- Called from CertUpdater.lua at end of DNS challenge
-- Remove DNS ACME challenge record
local function remDnsRec(domain, dnsRecord)
   local zoneT = db.znameGetZoneT(domain)
   if not zoneT then return end
   local recsT=getRecsTfromZoneT(zoneT)
   recsT[dnsRecord] = nil
   bindUpdateZone(zoneT)
end


local function createZone(zname, uname, pwd)
   if db.getZoneKey(zname) then return nil, "zone exists" end
   local zoneT
   zoneT=db.addZone(zname, uname, ha1(uname, pwd), function()
      updateNamedConf()
      execsbin("rndc","reconfig")
      bindzonedb(zoneT)
      ba.timer(function() certUpdater.addZone(zname) end):set(20000,true)
      log(false, "New zone %s : %s", zname, uname)
   end)
   return zoneT.zkey
end


-- User's from mako.conf : System admin users
function app.checkRootCredentials(uname, pwd)
   local p=conf.users[uname]
   if type(p) == 'table' then return p[1] == ha1(uname or "",pwd or "") end
   return p == pwd -- cleartext
end


do -- scope

   -- Access Right (ACL) management functions

   local function userCanAccess(userType)
      return userType == "user" or not userType
   end
   
   local powerUserTypeT={power=true,user=true}
   local function powerUserCanAccess(userType)
      return powerUserTypeT[userType] or not userType
   end

   local adminUserTypeT={admin=true,power=true,user=true}
   local function adminUserCanAccess(userType)
      return adminUserTypeT[userType] or not userType
   end

   -- Login as user (can be power user)
   -- OR
   -- Login as the zone admin, one admin per zone.
   -- OR
   -- Login as root, the super user
   function app.login(cmd, zoneT, uname, pwd, userT)
      uname,pwd=trimS(uname or ""),trimS(pwd or "")
      local ha1=ha1(uname,pwd)
      local sso
      if userT then -- only set if SSO login
         sso=true
      else
         userT = db.getUserT(zoneT.zid,uname)
      end
      if userT then -- Try as std user
         if ha1 == userT.pwd or sso then
            if userT.poweruser then
               userT.canAccess=powerUserCanAccess
               userT.type = "power"
            else
               userT.canAccess=userCanAccess
               userT.type = "user"
               db.setUserAccess4Wan(zoneT.zid,userT.uid,peername(cmd))
            end
            db.setUserAccessTime(userT.uid)
            userT.pwd=nil
            cmd:login(uname)
            return userT
         end
      end
      -- Login as the zone admin OR as root
      if (zoneT.admEmail == uname and zoneT.admPwd == ha1) or
         app.checkRootCredentials(uname, pwd) then
         cmd:login(uname)
         return {
            canAccess=adminUserCanAccess,
            type = "admin",
            name=uname
         }
      end
   end
end -- scope


-- Deletes all data related to zone
local function deleteZone(zname)
   local zkey=db.getZoneKey(zname)
   if not zkey then
      return log(true, "Terminating zone warn: cannot find %s",zname)
   end
   db.removeZone(zkey,function()
      os.remove(mkFullZname(zname)) -- Delete bind's zone config file
      updateNamedConf()
      execsbin("rndc","reconfig")
      certUpdater.removeZone(zname)
      RevConRecsT[zname]=nil
   end)
end

local function deleteDevice(zoneT, dkey)
   db.removeDevice(dkey, function() bindUpdateZone(zoneT) end)
end

-----------------------------------------------------------------------
------ Code for managing client commands sent to '/command.lsp' -------
-----------------------------------------------------------------------

-- Client OK response (201)
local function rsp(cmd, hT)
   if hT then
      for k,v in pairs(hT) do cmd:setheader(k,v) end
   end
   cmd:setstatus(201)
   cmd:setcontentlength(0)
end

-- Client error response (status)
local function errorRsp(cmd, status, emsg)
   cmd:setstatus(status)
   cmd:setheader("X-Reason", emsg)
   cmd:setcontentlength(0)
   return nil,emsg
end

-- Ref-RR: Extract optional DNS A record type, which can be local
-- (default), WAN IP Address, or both. WAN and both can be used for
-- device with router pinhole (port forward).
local function getDnsType(hT)
   local dns=hT["X-Dns"]
   if dns ~= "wan" and dns ~= "both" then dns="local" end
   return dns
end


local function lookupDev(cmd,hT)
   local dkey=hT["X-Dev"]
   if not dkey then return errorRsp(cmd, 400, "No X-Dev") end
   local devT = db.keyGetDeviceT(dkey)
   if not devT then return errorRsp(cmd,404,"Unknown X-Dev") end
   return dkey, devT
end

local function getAndCheckIp(cmd,hT)
   local ip=hT["X-IpAddress"]
   if not ip then return errorRsp(cmd,400, "No X-IpAddress") end
   local a={ip:match"^(%d+)%.(%d+)%.(%d+)%.(%d+)$"}
   for i=1,4 do a[i]=tonumber(a[i]) end
   for i=1,4 do
      local n=a[i]
      if type(n) ~= "number" or n < 0 or n > 255 then
         return errorRsp(cmd,400, "Invalid IP addr: "..ip)
      end
   end
   return ip
end

local function getName(cmd,hT,zoneT)
   local name=hT["X-Name"] or "device"
   name=name:lower()
   local ix=name:find(".",1,true)
   if ix then
      if name:sub(ix+1) ~= zoneT.zname then
         return errorRsp(cmd, 400,"zone name does not match zone key")
      end
      name = name:sub(1,ix-1)
   end
   return name
end


-- Client "Register" device command
local function cmdRegister(cmd,hT,zkey,zoneT)
   local ip=getAndCheckIp(cmd,hT)
   if not ip then return end
   local name=getName(cmd,hT,zoneT)
   if not name or name:find"[^%a%d-]" or name:find"^-" or name:find"-$" then
      return errorRsp(cmd,400,"Invalid sub-domain name")
   end
   -- Make sure sub-domain name is unique by checking name conflict in nameT
   local ix,orgn=0,name
   while db.nameGetDeviceT(zoneT.zid,name) do ix=ix+1 name=fmt("%s%d",orgn,ix) end
   local dkey=db.addDevice(zoneT.zkey,name,ip,peername(cmd),getDnsType(hT),hT["X-Info"] or "", function() bindUpdateZone(zoneT) end)
   rsp(cmd, {["X-Dev"]=dkey, ["X-Name"]=fmt("%s.%s",name,zoneT.zname)})
end


-- Client "IsRegistered" device command
local function cmdIsRegistered(cmd,hT,zkey,zoneT)
   local dkey,devT = lookupDev(cmd,hT)
   if not dkey then return end
   local peer = peername(cmd)
   if devT.wanAddr ~= peer then
      db.updateAddress4Device(devT.dkey,devT.localAddr,peer,devT.dns)
   end
   rsp(cmd, {["X-Name"]=fmt("%s.%s",devT.name,zoneT.zname)})
end


-- Client "IsAvailable" device command
local function cmdIsAvailable(cmd,hT,zkey,zoneT)
   local name=getName(cmd,hT,zoneT)
   if not name then return end
   rsp(cmd, {["X-Available"] = db.nameGetDeviceT(zoneT.zid,name) and "no" or "yes"})
end

-- Client "SetIpAddress" device command
local function cmdSetIpAddress(cmd,hT,zkey,zoneT)
   local dkey,devT = lookupDev(cmd,hT)
   if not dkey then return end
   local ip=getAndCheckIp(cmd,hT)
   if not ip then return end
   local wan=peername(cmd)
   local dtype=getDnsType(hT)
   if devT.localAddr~=ip or devT.wanAddr~=wan or devT.dns~=dtype then
      db.updateAddress4Device(dkey,ip,wan,dtype,function() bindUpdateZone(zoneT) end)
   else
      db.updateTime4Device(dkey)
   end
   rsp(cmd, {["X-Name"]=fmt("%s.%s",devT.name,zoneT.zname)})
end

-- Client "SetAcmeRecord" device command
local function cmdSetAcmeRecord(cmd,hT,zkey,zoneT)
   local dkey,devT = lookupDev(cmd,hT)
   if not dkey then return end
   local rname=hT['X-RecordName']
   local rdata=hT['X-RecordData']
   local dnsResolveTmo=hT["X-DnsResolveTmo"]
   dnsResolveTmo = dnsResolveTmo and tonumber(dnsResolveTmo) or 120000
   if not rname or not rdata then return errorRsp(cmd,400,"Invalid command") end
   local recsT,recT = getRecsTfromZoneT(zoneT, dkey)
   recT[rname]=rdata
   -- In case device dos not call cmdRemoveAcmeRecord
   ba.timer(function() recsT[dkey] = nil end):set(dnsResolveTmo+10000,true)
   bindUpdateZone(zoneT)
   db.updateTime4Device(dkey)
   local peer = peername(cmd)
   if devT.wanAddr ~= peer then
      db.updateAddress4Device(devT.dkey,devT.localAddr,peer,devT.dns)
   end
   rsp(cmd)
end

-- Client "RemoveAcmeRecord" device command
local function cmdRemoveAcmeRecord(cmd,hT,zkey,zoneT)
   local dkey,devT = lookupDev(cmd,hT)
   if not dkey then return end
   local recsT=getRecsTfromZoneT(zoneT)
   recsT[dkey] = nil
   bindUpdateZone(zoneT)
   rsp(cmd)
end

-- Client "GetWan" device command
local function cmdGetWan(cmd,hT,zkey,zoneT)
   hT={["X-IpAddress"]=peername(cmd)}
   rsp(cmd,hT)
end

local function cmdRevCon(cmd,hT,zkey,zoneT)
   local dkey = lookupDev(cmd,hT)
   if not dkey then return end
   cmd:setstatus(202)
   cmd:flush()
   rcBridge.newDevice(zoneT.zname,dkey,ba.socket.req2sock(cmd))
end

-- All commands (functions)
local commandT={
   Register=cmdRegister,
   IsRegistered=cmdIsRegistered,
   IsAvailable=cmdIsAvailable,
   SetIpAddress=cmdSetIpAddress,
   SetAcmeRecord=cmdSetAcmeRecord,
   RemoveAcmeRecord=cmdRemoveAcmeRecord,
   GetWan=cmdGetWan,
   RevCon=cmdRevCon
}

local function b64Dec(b64)
   return b64 and ba.b64decode(b64)
end

-- Find and execute client command
local function command(cmd)
   local hT=xssfilter(trim(cmd:header()))
   local zkey,rtoken,token,hash =
      hT["X-Key"],
      b64Dec(hT["X-RefreshToken"]),
      b64Dec(hT["X-Token"]),
      b64Dec(hT["X-Hash"])
   if not zkey or not rtoken or not token or not hash then -- Not a SharkTrustX client
      return cmd:senderror(404)
   end
   -- Client must use a secure connection
   if not cmd:issecure() then return errorRsp(cmd,400, "TLS required") end
   if not rtm.tokenValid(rtoken) then
      return errorRsp(cmd,403, "Invalid RefreshToken")
   end
   local zoneT = db.zkeyGetZoneT(zkey)
   if not zoneT then return errorRsp(cmd,404, "Invalid X-Key") end
   local dk = PBKDF2Cache(zkey, supper(zoneT.zsecret))
   if token ~= ba.crypto.hash"sha256"(hash)(dk)(serverIP)(rtoken)(true,"binary") then
      return errorRsp(cmd,403, "Invalid token")
   end
   local c=commandT[hT["X-Command"]]
   if not c then return errorRsp(cmd,400,"Unknown  X-Command") end
   c(cmd,hT,zkey,zoneT)
end

-- LSP page "/command.lsp" calls app.command
local function msgh(emsg) log(true,"%s",debug.traceback(emsg)) return emsg end
function app.command(cmd)
   local ok, err = xpcall(command,msgh,cmd) -- trap any Lua error
   if not ok then errorRsp(cmd,500,err) end -- Server error
end



-----------------------------------------------------------------------
----- END: Code for managing client commands sent to /command.lsp -----
-----------------------------------------------------------------------

-- Misc. code

local function delayedLoad()
   assert(string.find(baexec"whoami", "root") or iswin==true,
          "Server must run as user root!!!")
   local xio=ba.openio(iswin and "home" or "disk")
   --If testing on win
   if iswin then xio:mkdir"etc" xio:mkdir"etc/bind" xio:mkdir"etc/bind/zones" end
   if (not xio:stat"/etc/bind/zones/" and not xio:mkdir"/etc/bind/zones/") then
      error"Cannot access /etc/bind/zones/"
   end
   baexec"/etc/init.d/bind9 stop"
   -- rebuild all 'bind' settings
   for zid,zname,zkey in db.getZonesT() do
      local zoneT = db.znameGetZoneT(zname)
      bindzonedb(zoneT)
      certUpdater.addZone(zname)
   end
   updateNamedConf()
   ba.sleep(1000)
   baexec"/etc/init.d/bind9 start"
   local a=settingsT.acme
   local acmeOP={
      production=a.production,
      rsa=a.rsa,
      acceptterms=true,
   }
   local domainsL={settingsT.dn,hostname}
   certUpdater.start(domainsL, setDnsRec, remDnsRec,admEmail,acmeOP)
   log(false, "Ready %s", os.date())
end
ba.thread.run(delayedLoad)

-- Export:
app.ha1=ha1
app.createZone = createZone
app.deleteDevice=deleteDevice
app.deleteZone = deleteZone
app.peername = peername
app.settingsT = settingsT

-- Converts UTC time to UNIX time
function app.convertUTCTime(tm)
   if type(tm) == "string" then
      local exptime = ba.parsecerttime(tm)
      if exptime ~= 0 then return exptime end
   end
end


do
   local aeskey=ba.aeskey(32)
   function app.aesencode(data)
      return ba.aesencode(aeskey,data)
   end
   function app.aesdecode(data)
      return ba.aesdecode(aeskey,data)
   end
end


function app.sendRegEmail(cmd,zoneT,dataT,name)
   local data=app.aesencode(ba.json.encode(dataT))
   local i,line=1,"--------------------------------"
   local t={line}
   for j=32,#data,31 do table.insert(t,data:sub(i,j)) i=j+1 end
   table.insert(t,data:sub(i))
   table.insert(t,line)
   data=table.concat(t,"\n")
   local peer = cmd:peername()
   local lgSend = require"log".sendmail
   if zoneT.autoReg then
      local function sendEmail()
         lgSend{
            subject="Create account for "..zoneT.zname,
            to=dataT.email,
            body=fmt(
              "%s%s\n",
              "\nComplete your registration by copying the following data and pasting it into the online form:\n\n",
            data)
         }
      end
      ba.thread.run(sendEmail)
   else
      local function sendEmail()
         lgSend{
            subject=fmt("%s : %s requests access to %s",name or "Single Sign On",dataT.email,zoneT.zname),
            to=zoneT.admEmail,
            body=fmt(
              "%s\nhttps://%s/create.html?state=register\n\n%s\n",
              "\nAccept the registration request by copying the following data and pasting it into the online form:",
              zoneT.zname,data)
         }
      end
      ba.thread.run(sendEmail)
   end
end

function app.date(datetime)
   local secs = (type(datetime) == "string" and ba.datetime(datetime) or datetime):ticks()
   return os.date("%Y-%m-%d",secs)
   
end

-----------------------------------------------------------------------
-----              Content Management System (CMS)                -----
-----------------------------------------------------------------------

local serviceName = settingsT.dn
local parseLspPage,templatePage=io:dofile(".lua/www/engine.lua",app)
local zonesDir=io:dofile(".lua/www/zones.lua",app)(parseLspPage,templatePage)
local adminDir=io:dofile(".lua/www/admin.lua",app)(parseLspPage,templatePage)
local methods={GET=true,POST=true} -- no other
local function cmsfunc(_ENV,relpath)
   if not methods[request:method()] then return false end -- Delegate
   if request:header"Authorization"  then return false end -- Delegate basic/dig
   local host = request:domain()
   if not host then response:senderror(404) return end
   if not request:issecure() then response:redirect2tls() end
   _ENV.db=db
   if host == serviceName then return adminDir(_ENV,relpath) end
   local zoneT=db.znameGetZoneT(host)
   _ENV.zoneT=zoneT
   if not zoneT then
      -- Is this a Reverse Connection (RC) FQN
      local dz,zone=host:match"([^%.]+)%.(.+)"
      -- Length comes from RevConnBridge.lua a-> createSecret()
      if dz and 32 == #dz then
         local zT=db.znameGetZoneT(zone)
         if zT then
            rcBridge.newClient(request,dz,zone)
            return
         end
      end
   end
   return zonesDir(_ENV,relpath, host)
end
local cmsdir=ba.create.dir()
cmsdir:setfunc(cmsfunc)
dir:insert(cmsdir, true) -- Exec cmsdir:cmsfunc for all non found assets
